// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/event/bus.go

// Package event is a generated GoMock package.
package event

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBus is a mock of Bus interface.
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus.
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance.
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockBus) Publish(arg0 context.Context, arg1 []Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockBusMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBus)(nil).Publish), arg0, arg1)
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// AggregateId mocks base method.
func (m *MockEvent) AggregateId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateId")
	ret0, _ := ret[0].(string)
	return ret0
}

// AggregateId indicates an expected call of AggregateId.
func (mr *MockEventMockRecorder) AggregateId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateId", reflect.TypeOf((*MockEvent)(nil).AggregateId))
}

// DTO mocks base method.
func (m *MockEvent) DTO() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DTO")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// DTO indicates an expected call of DTO.
func (mr *MockEventMockRecorder) DTO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DTO", reflect.TypeOf((*MockEvent)(nil).DTO))
}

// Id mocks base method.
func (m *MockEvent) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockEventMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockEvent)(nil).Id))
}

// OccurredOn mocks base method.
func (m *MockEvent) OccurredOn() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OccurredOn")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// OccurredOn indicates an expected call of OccurredOn.
func (mr *MockEventMockRecorder) OccurredOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OccurredOn", reflect.TypeOf((*MockEvent)(nil).OccurredOn))
}

// Type mocks base method.
func (m *MockEvent) Type() Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockEventMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockEvent)(nil).Type))
}
